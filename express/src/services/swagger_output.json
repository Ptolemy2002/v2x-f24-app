{
  "openapi": "3.1.1",
  "info": {
    "version": "1.0.0",
    "title": "V2X F24 API",
    "description": "Documentation of the V2X F24 API"
  },
  "servers": [
    {
      "url": "http://localhost:8080/"
    }
  ],
  "paths": {
    "/": {
      "get": {
        "tags": [
          "General"
        ],
        "description": "",
        "responses": {
          "200": {
            "description": "Root route",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Root route. For docs, go <a href='/api/v1/docs'>here</a>.",
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "string",
                  "example": "Root route. For docs, go <a href='/api/v1/docs'>here</a>.",
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              }
            }
          }
        }
      }
    },
    "/ping": {
      "get": {
        "tags": [
          "General"
        ],
        "description": "  Ping the server to ensure the API is up and running.  It should respond with a 200 response and the text \"pong\".  ",
        "responses": {
          "200": {
            "description": "Server is up and running.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "pong",
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "string",
                  "example": "pong",
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/bot/query": {
      "post": {
        "tags": [
          "Bot"
        ],
        "description": "Query the bot for a response.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BotQuery200ResponseBody"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/BotQuery200ResponseBody"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse404"
                },
                "example": {
                  "ok": false,
                  "code": "NOT_FOUND",
                  "message": "Could not find the original conversation in the database to update.",
                  "help": "http://example.com/docs"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BotQueryRequestBody"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/BotQueryRequestBody"
              }
            }
          }
        }
      }
    },
    "/api/v1/conversation/get/{id}": {
      "get": {
        "tags": [
          "Conversation"
        ],
        "description": "Get a conversation by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the conversation to get"
          }
        ],
        "responses": {
          "200": {
            "description": "Conversation found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationGet200ResponseBody"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationGet200ResponseBody"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              }
            }
          },
          "404": {
            "description": "Conversation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "ok": false,
                  "code": "NOT_FOUND",
                  "message": "No conversation found with the specified ID.",
                  "help": "http://example.com/docs"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/conversation/new": {
      "post": {
        "tags": [
          "Conversation"
        ],
        "description": "Create a new conversation with the default demo data.",
        "parameters": [
          {
            "$ref": "#/components/parameters/anonymous"
          },
          {
            "$ref": "#/components/parameters/a"
          }
        ],
        "responses": {
          "200": {
            "description": "Conversation created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationNew200ResponseBody"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationNew200ResponseBody"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/conversation/list-name": {
      "get": {
        "tags": [
          "Conversation"
        ],
        "description": "List all conversation names.",
        "responses": {
          "200": {
            "description": "Conversation names found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationListName200ResponseBody"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationListName200ResponseBody"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/conversation/update/by-id/{id}": {
      "post": {
        "tags": [
          "Conversation"
        ],
        "description": "Update an existing conversation in the database.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the conversation to update."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationUpdateByIDResponseBody"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationUpdateByIDResponseBody"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConversationUpdateByIDRequestBody"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/ConversationUpdateByIDRequestBody"
              }
            }
          }
        }
      }
    },
    "/api/v1/conversation/update/by-name/{name}": {
      "post": {
        "tags": [
          "Conversation"
        ],
        "description": "Update an existing conversation in the database.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The name of the conversation to update."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationUpdateByNameResponseBody"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationUpdateByNameResponseBody"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse501"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConversationUpdateByNameRequestBody"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/ConversationUpdateByNameRequestBody"
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "anonymous": {
        "schema": {
          "$ref": "#/components/schemas/anonymous"
        },
        "required": false,
        "name": "anonymous",
        "in": "query"
      },
      "a": {
        "schema": {
          "$ref": "#/components/schemas/a"
        },
        "required": false,
        "name": "a",
        "in": "query"
      }
    },
    "schemas": {
      "MessageOrigin": {
        "type": "string",
        "enum": [
          "sender",
          "recepient"
        ],
        "description": "The possible origins of a message."
      },
      "MessageType": {
        "type": "string",
        "enum": [
          "text",
          "image",
          "audio"
        ],
        "description": "The possible types of a message."
      },
      "MessageBase": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID for the message.",
            "example": "abc123"
          },
          "origin": {
            "$ref": "#/components/schemas/MessageOrigin"
          },
          "type": {
            "$ref": "#/components/schemas/MessageType"
          },
          "date": {
            "type": "string",
            "description": "The date the message was initially sent.",
            "example": "new Date(\"2021-01-01T00:00:00.000Z\")"
          }
        },
        "required": [
          "id",
          "origin",
          "type",
          "date"
        ],
        "description": "The base schema for a message."
      },
      "MongoMessageBase": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID for the message.",
            "example": "abc123"
          },
          "origin": {
            "$ref": "#/components/schemas/MessageOrigin"
          },
          "type": {
            "$ref": "#/components/schemas/MessageType"
          },
          "date": {
            "type": "string",
            "description": "The date the message was initially sent.",
            "example": "2021-01-01T00:00:00.000Z"
          }
        },
        "required": [
          "id",
          "origin",
          "type",
          "date"
        ],
        "description": "The MongoDB representation of the base schema for a message."
      },
      "TextMessageBase": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "The text content of the message.",
            "example": "Hello, world!"
          }
        },
        "required": [
          "text"
        ],
        "description": "The base schema for a text message."
      },
      "TextMessage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID for the message.",
            "example": "abc123"
          },
          "origin": {
            "$ref": "#/components/schemas/MessageOrigin"
          },
          "type": {
            "type": "string",
            "enum": [
              "text"
            ],
            "description": "The type of message."
          },
          "date": {
            "type": "string",
            "description": "The date the message was initially sent.",
            "example": "new Date(\"2021-01-01T00:00:00.000Z\")"
          },
          "text": {
            "type": "string",
            "description": "The text content of the message.",
            "example": "Hello, world!"
          }
        },
        "required": [
          "id",
          "origin",
          "type",
          "date",
          "text"
        ],
        "description": "A text message."
      },
      "MongoTextMessage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID for the message.",
            "example": "abc123"
          },
          "origin": {
            "$ref": "#/components/schemas/MessageOrigin"
          },
          "type": {
            "type": "string",
            "enum": [
              "text"
            ],
            "description": "The type of message."
          },
          "date": {
            "type": "string",
            "description": "The date the message was initially sent.",
            "example": "2021-01-01T00:00:00.000Z"
          },
          "text": {
            "type": "string",
            "description": "The text content of the message.",
            "example": "Hello, world!"
          }
        },
        "required": [
          "id",
          "origin",
          "type",
          "date",
          "text"
        ],
        "description": "The MongoDB representation of a text message."
      },
      "ImageMessageBase": {
        "type": "object",
        "properties": {
          "src": {
            "type": "string",
            "description": "The source of the image.",
            "example": "https://example.com/image.jpg"
          },
          "alt": {
            "type": "string",
            "description": "The alt text for the image.",
            "example": "An image of a cat."
          }
        },
        "required": [
          "src",
          "alt"
        ],
        "description": "The base schema for an image message."
      },
      "ImageMessage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID for the message.",
            "example": "abc123"
          },
          "origin": {
            "$ref": "#/components/schemas/MessageOrigin"
          },
          "type": {
            "type": "string",
            "enum": [
              "image"
            ],
            "description": "The type of message."
          },
          "date": {
            "type": "string",
            "description": "The date the message was initially sent.",
            "example": "new Date(\"2021-01-01T00:00:00.000Z\")"
          },
          "src": {
            "type": "string",
            "description": "The source of the image.",
            "example": "https://example.com/image.jpg"
          },
          "alt": {
            "type": "string",
            "description": "The alt text for the image.",
            "example": "An image of a cat."
          }
        },
        "required": [
          "id",
          "origin",
          "type",
          "date",
          "src",
          "alt"
        ],
        "description": "An image message."
      },
      "MongoImageMessage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID for the message.",
            "example": "abc123"
          },
          "origin": {
            "$ref": "#/components/schemas/MessageOrigin"
          },
          "type": {
            "type": "string",
            "enum": [
              "image"
            ],
            "description": "The type of message."
          },
          "date": {
            "type": "string",
            "description": "The date the message was initially sent.",
            "example": "2021-01-01T00:00:00.000Z"
          },
          "src": {
            "type": "string",
            "description": "The source of the image.",
            "example": "https://example.com/image.jpg"
          },
          "alt": {
            "type": "string",
            "description": "The alt text for the image.",
            "example": "An image of a cat."
          }
        },
        "required": [
          "id",
          "origin",
          "type",
          "date",
          "src",
          "alt"
        ],
        "description": "The MongoDB representation of an image message."
      },
      "AudioMessageBase": {
        "type": "object",
        "properties": {
          "src": {
            "type": "string",
            "description": "The source of the audio.",
            "example": "https://example.com/audio.mp3"
          }
        },
        "required": [
          "src"
        ],
        "description": "The base schema for an audio message."
      },
      "AudioMessage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID for the message.",
            "example": "abc123"
          },
          "origin": {
            "$ref": "#/components/schemas/MessageOrigin"
          },
          "type": {
            "type": "string",
            "enum": [
              "audio"
            ],
            "description": "The type of message."
          },
          "date": {
            "type": "string",
            "description": "The date the message was initially sent.",
            "example": "new Date(\"2021-01-01T00:00:00.000Z\")"
          },
          "src": {
            "type": "string",
            "description": "The source of the audio.",
            "example": "https://example.com/audio.mp3"
          }
        },
        "required": [
          "id",
          "origin",
          "type",
          "date",
          "src"
        ],
        "description": "An audio message."
      },
      "MongoAudioMessage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID for the message.",
            "example": "abc123"
          },
          "origin": {
            "$ref": "#/components/schemas/MessageOrigin"
          },
          "type": {
            "type": "string",
            "enum": [
              "audio"
            ],
            "description": "The type of message."
          },
          "date": {
            "type": "string",
            "description": "The date the message was initially sent.",
            "example": "2021-01-01T00:00:00.000Z"
          },
          "src": {
            "type": "string",
            "description": "The source of the audio.",
            "example": "https://example.com/audio.mp3"
          }
        },
        "required": [
          "id",
          "origin",
          "type",
          "date",
          "src"
        ],
        "description": "The MongoDB representation of an audio message."
      },
      "Message": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/TextMessage"
          },
          {
            "$ref": "#/components/schemas/ImageMessage"
          },
          {
            "$ref": "#/components/schemas/AudioMessage"
          }
        ],
        "description": "A message."
      },
      "MongoMessage": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/MongoTextMessage"
          },
          {
            "$ref": "#/components/schemas/MongoImageMessage"
          },
          {
            "$ref": "#/components/schemas/MongoAudioMessage"
          }
        ],
        "description": "The MongoDB representation of a message."
      },
      "UniqueMessageArray": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Message"
        },
        "description": "An array of messages with unique IDs."
      },
      "UniqueMongoMessageArray": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/MongoMessage"
        },
        "description": "An array of MongoDB messages with unique IDs."
      },
      "ConversationID": {
        "type": "string",
        "description": "The ID of a conversation in the database",
        "example": "abc123"
      },
      "Conversation": {
        "type": "object",
        "properties": {
          "id": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ConversationID"
              },
              {
                "type": "string",
                "enum": [
                  "anonymous"
                ]
              }
            ],
            "description": "The ID of the conversation or 'anonymous' if the conversation should not be saved to the database.",
            "example": "abc123"
          },
          "name": {
            "type": "string",
            "description": "The name of the conversation.",
            "example": "Untitled Conversation"
          },
          "messages": {
            "$ref": "#/components/schemas/UniqueMessageArray"
          },
          "createdAt": {
            "type": "string",
            "description": "The date and time the conversation was created.",
            "example": "2021-07-01T00:00:00.000Z"
          }
        },
        "required": [
          "id",
          "name",
          "messages",
          "createdAt"
        ],
        "description": "A conversation."
      },
      "MongoConversation": {
        "type": "object",
        "properties": {
          "_id": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ConversationID"
              },
              {
                "type": "string",
                "enum": [
                  "anonymous"
                ]
              }
            ],
            "description": "The ID of the conversation or 'anonymous' if the conversation should not be saved to the database.",
            "example": "abc123"
          },
          "name": {
            "type": "string",
            "description": "The name of the conversation.",
            "example": "Untitled Conversation"
          },
          "messages": {
            "$ref": "#/components/schemas/UniqueMongoMessageArray"
          },
          "createdAt": {
            "type": "string",
            "description": "The date and time the conversation was created.",
            "example": "2021-07-01T00:00:00.000Z"
          }
        },
        "required": [
          "_id",
          "name",
          "messages",
          "createdAt"
        ],
        "description": "The MongoDB representation of a conversation."
      },
      "ErrorCode": {
        "type": "string",
        "enum": [
          "UNKNOWN",
          "BAD_INPUT",
          "BAD_URL",
          "BAD_QUERY",
          "BAD_BODY",
          "INTERNAL",
          "NOT_FOUND",
          "NOT_IMPLEMENTED",
          "VALIDATION"
        ],
        "description": "An error code that may be returned by the server."
      },
      "ErrorMessage": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "type": "null"
          }
        ],
        "description": "A message describing an error.",
        "example": "Internal server error."
      },
      "HelpLink": {
        "type": "string",
        "format": "uri",
        "description": "A URL to the docs page that may help the user resolve the error or understand the response.",
        "example": "https://example.com/docs"
      },
      "ErrorResponseBase": {
        "type": "object",
        "properties": {
          "ok": {
            "type": "boolean",
            "enum": [
              false
            ],
            "description": "Whether the operation was successful.",
            "example": false
          },
          "help": {
            "$ref": "#/components/schemas/HelpLink"
          }
        },
        "required": [
          "ok"
        ],
        "description": "An error response from the server."
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "ok": {
            "type": "boolean",
            "enum": [
              false
            ],
            "description": "Whether the operation was successful.",
            "example": false
          },
          "help": {
            "$ref": "#/components/schemas/HelpLink"
          },
          "code": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ErrorCode"
              },
              {
                "description": "The error code.",
                "example": "UNKNOWN"
              }
            ]
          },
          "message": {
            "$ref": "#/components/schemas/ErrorMessage"
          }
        },
        "required": [
          "ok",
          "code",
          "message"
        ]
      },
      "ErrorResponse501": {
        "type": "object",
        "properties": {
          "ok": {
            "type": "boolean",
            "enum": [
              false
            ],
            "description": "Whether the operation was successful.",
            "example": false
          },
          "help": {
            "$ref": "#/components/schemas/HelpLink"
          },
          "code": {
            "type": "string",
            "enum": [
              "NOT_IMPLEMENTED"
            ],
            "description": "The error code."
          },
          "message": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ErrorMessage"
              },
              {
                "example": "This feature is not yet implemented."
              }
            ]
          }
        },
        "required": [
          "ok",
          "code",
          "message"
        ]
      },
      "ErrorResponse400": {
        "type": "object",
        "properties": {
          "ok": {
            "type": "boolean",
            "enum": [
              false
            ],
            "description": "Whether the operation was successful.",
            "example": false
          },
          "help": {
            "$ref": "#/components/schemas/HelpLink"
          },
          "code": {
            "type": "string",
            "enum": [
              "BAD_INPUT",
              "BAD_BODY",
              "BAD_QUERY",
              "BAD_URL"
            ],
            "description": "The error code."
          },
          "message": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ErrorMessage"
              },
              {
                "example": "Invalid input."
              }
            ]
          }
        },
        "required": [
          "ok",
          "code",
          "message"
        ]
      },
      "ErrorResponse404": {
        "type": "object",
        "properties": {
          "ok": {
            "type": "boolean",
            "enum": [
              false
            ],
            "description": "Whether the operation was successful.",
            "example": false
          },
          "help": {
            "$ref": "#/components/schemas/HelpLink"
          },
          "code": {
            "type": "string",
            "enum": [
              "NOT_FOUND"
            ],
            "description": "The error code."
          },
          "message": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ErrorMessage"
              },
              {
                "example": "No resources found."
              }
            ]
          }
        },
        "required": [
          "ok",
          "code",
          "message"
        ]
      },
      "SuccessResponseBase": {
        "type": "object",
        "properties": {
          "ok": {
            "type": "boolean",
            "enum": [
              true
            ],
            "description": "Whether the operation was successful.",
            "example": true
          },
          "help": {
            "$ref": "#/components/schemas/HelpLink"
          }
        },
        "required": [
          "ok"
        ],
        "description": "A successful response from the server."
      },
      "BotQueryRequestBody": {
        "type": "object",
        "properties": {
          "conversation": {
            "$ref": "#/components/schemas/MongoConversation"
          }
        },
        "required": [
          "conversation"
        ],
        "description": "The request body for the bot query endpoint"
      },
      "BotQuery200ResponseBody": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "newMessage": {
                "$ref": "#/components/schemas/MongoMessage"
              }
            },
            "required": [
              "newMessage"
            ],
            "description": "The 200 response body for the bot query endpoint"
          },
          {
            "$ref": "#/components/schemas/SuccessResponseBase"
          }
        ]
      },
      "BotQueryResponseBody": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/BotQuery200ResponseBody"
          },
          {
            "$ref": "#/components/schemas/ErrorResponse"
          }
        ],
        "description": "The response body for the bot query endpoint"
      },
      "ConversationGet200ResponseBody": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "conversation": {
                "$ref": "#/components/schemas/MongoConversation"
              }
            },
            "required": [
              "conversation"
            ],
            "description": "The 200 response body for the conversation get endpoint"
          },
          {
            "$ref": "#/components/schemas/SuccessResponseBase"
          }
        ]
      },
      "ConversationGetResponseBody": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/ConversationGet200ResponseBody"
          },
          {
            "$ref": "#/components/schemas/ErrorResponse"
          }
        ],
        "description": "The response body for the conversation get endpoint"
      },
      "ConversationGetURLParams": {
        "type": "object",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ConversationID"
              },
              {
                "description": "ID of the conversation to get."
              }
            ]
          }
        },
        "required": [
          "id"
        ]
      },
      "ConversationNew200ResponseBody": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "conversation": {
                "$ref": "#/components/schemas/MongoConversation"
              }
            },
            "required": [
              "conversation"
            ],
            "description": "The 200 response body for the new conversation endpoint"
          },
          {
            "$ref": "#/components/schemas/SuccessResponseBase"
          }
        ]
      },
      "anonymous": {
        "type": "string",
        "enum": [
          "true",
          "false",
          "t",
          "f",
          "yes",
          "no",
          "y",
          "n",
          "1",
          "0",
          "on",
          "off"
        ],
        "default": "f",
        "description": "[Query Parameter] When creating a conversation, this parameter determines whether it should be anonymous, meaning it will not be saved to the database."
      },
      "a": {
        "type": "string",
        "enum": [
          "true",
          "false",
          "t",
          "f",
          "yes",
          "no",
          "y",
          "n",
          "1",
          "0",
          "on",
          "off"
        ],
        "default": "f",
        "description": "[Query Parameter] Shorthand for the `anonymous` query parameter."
      },
      "ConversationNewQueryParams": {
        "type": "object",
        "properties": {
          "anonymous": {
            "$ref": "#/components/schemas/anonymous"
          },
          "a": {
            "$ref": "#/components/schemas/a"
          }
        },
        "description": "The query parameters for the new conversation endpoint"
      },
      "ConversationNewResponseBody": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/ConversationNew200ResponseBody"
          },
          {
            "$ref": "#/components/schemas/ErrorResponse"
          }
        ],
        "description": "The response body for the new conversation endpoint"
      },
      "ConversationListName200ResponseBody": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "entries": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ConversationID"
                        },
                        {
                          "description": "ID of the conversation"
                        }
                      ]
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the conversation",
                      "example": "Unititled Conversation"
                    },
                    "createdAt": {
                      "type": "string",
                      "description": "Date and time the conversation was created",
                      "example": "2021-07-01T00:00:00.000Z"
                    },
                    "modifiedAt": {
                      "type": "string",
                      "description": "Date and time the conversation last had any activity",
                      "example": "2021-07-01T00:00:00.000Z"
                    }
                  },
                  "required": [
                    "_id",
                    "name",
                    "createdAt",
                    "modifiedAt"
                  ]
                }
              }
            },
            "required": [
              "entries"
            ],
            "description": "The 200 response body for the conversation list name endpoint"
          },
          {
            "$ref": "#/components/schemas/SuccessResponseBase"
          }
        ]
      },
      "ConversationListNameResponseBody": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/ConversationListName200ResponseBody"
          },
          {
            "$ref": "#/components/schemas/ErrorResponse"
          }
        ],
        "description": "The response body for the conversation list name endpoint"
      },
      "ConversationUpdateByIDURLParams": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ConversationID"
          }
        },
        "required": [
          "id"
        ],
        "description": "The URL parameters for updating a conversation"
      },
      "ConversationUpdateByIDRequestBody": {
        "type": "object",
        "properties": {
          "difference": {
            "type": "object",
            "properties": {
              "$set": {
                "type": "object",
                "additionalProperties": {},
                "description": "The fields to set. Each key is a path to a field.",
                "example": {
                  "name": "New Name"
                }
              },
              "$unset": {
                "type": "object",
                "additionalProperties": {
                  "type": "string",
                  "enum": [
                    ""
                  ]
                },
                "description": "The fields to unset. Each key is a path to a field. Cannot be a direct path to a field, must be nested from a list field.",
                "example": {
                  "messages.0": ""
                }
              },
              "$push": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "$each": {
                      "type": "array",
                      "items": {}
                    }
                  },
                  "required": [
                    "$each"
                  ]
                },
                "description": "The fields to push. Each key is a path to a field. Must be a direct path to a list field.",
                "example": {
                  "messages": {
                    "$each": [
                      {
                        "type": "text",
                        "origin": "sender",
                        "text": "Hello, world!"
                      }
                    ]
                  }
                }
              },
              "$pullAll": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "$in": {
                      "type": "array",
                      "items": {}
                    }
                  },
                  "required": [
                    "$in"
                  ]
                },
                "description": "The fields to pull. Each key is a path to a field. Must be a direct path to a list field.",
                "example": {
                  "messages": {
                    "$in": [
                      {
                        "type": "text",
                        "origin": "sender",
                        "text": "Hello, world!"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "required": [
          "difference"
        ],
        "description": "The request body for updating a conversation"
      },
      "UpdateConversationByID200ResponseBody": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "conversation": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MongoConversation"
                  },
                  {
                    "description": "The conversation that was updated"
                  }
                ]
              }
            },
            "required": [
              "conversation"
            ]
          },
          {
            "$ref": "#/components/schemas/SuccessResponseBase"
          }
        ],
        "description": "The 200 response body from updating a conversation"
      },
      "UpdateConversationByIDResponseBody": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/UpdateConversationByID200ResponseBody"
          },
          {
            "$ref": "#/components/schemas/ErrorResponse"
          }
        ],
        "description": "The response for updating a conversation"
      },
      "ConversationUpdateByNameURLParams": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "description": "The URL parameters for updating a conversation by name."
      },
      "ConversationUpdateByNameRequestBody": {
        "type": "object",
        "properties": {
          "difference": {
            "type": "object",
            "properties": {
              "$set": {
                "type": "object",
                "additionalProperties": {},
                "description": "The fields to set. Each key is a path to a field.",
                "example": {
                  "name": "New Name"
                }
              },
              "$unset": {
                "type": "object",
                "additionalProperties": {
                  "type": "string",
                  "enum": [
                    ""
                  ]
                },
                "description": "The fields to unset. Each key is a path to a field. Cannot be a direct path to a field, must be nested from a list field.",
                "example": {
                  "messages.0": ""
                }
              },
              "$push": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "$each": {
                      "type": "array",
                      "items": {}
                    }
                  },
                  "required": [
                    "$each"
                  ]
                },
                "description": "The fields to push. Each key is a path to a field. Must be a direct path to a list field.",
                "example": {
                  "messages": {
                    "$each": [
                      {
                        "type": "text",
                        "origin": "sender",
                        "text": "Hello, world!"
                      }
                    ]
                  }
                }
              },
              "$pullAll": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "$in": {
                      "type": "array",
                      "items": {}
                    }
                  },
                  "required": [
                    "$in"
                  ]
                },
                "description": "The fields to pull. Each key is a path to a field. Must be a direct path to a list field.",
                "example": {
                  "messages": {
                    "$in": [
                      {
                        "type": "text",
                        "origin": "sender",
                        "text": "Hello, world!"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "required": [
          "difference"
        ],
        "description": "The request body for updating a conversation"
      },
      "ConversationUpdateByNameResponseBody": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "conversation": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MongoConversation"
                  },
                  {
                    "description": "The conversation that was updated"
                  }
                ]
              }
            },
            "required": [
              "conversation"
            ]
          },
          {
            "$ref": "#/components/schemas/SuccessResponseBase"
          }
        ],
        "description": "The 200 response body from updating a conversation"
      }
    }
  }
}